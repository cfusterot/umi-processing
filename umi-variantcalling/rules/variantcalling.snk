rule vardict:
    input:
        ref=config["reference"]['genome'],
        # you can have a list of samples here
        #samples=lambda wildcards: input_bam[wildcards.sample],
        sample="{}/mapped/{{sample}}.realigned.bam".format(DEMUXDIR),
        # optional BED file specifying chromosomal regions on which freebayes
        # should run, e.g. all regions that show coverage
        regions=config["reference"]["region_file"]
    output:
        "{}/vardict/{{sample}}.vcf".format(OUTDIR)
    params:
        extra="-c 1 -S 2 -E 3 -g 4",
        vaf=config["vardict"]["vaf"]
    resources:
        time="48:00:00",
        threads=3
    conda:
        "../env/vardict.yaml"
    shell:
        r"""
        mkdir -p vardict
        vardict -k 0 -U -G {input.ref} -f {params.vaf} -N {sample} -b {input.sample} {params.extra} {input.regions} | ${{CONDA_PREFIX}}/share/vardict-20*/teststrandbias.R | ${{CONDA_PREFIX}}/share/vardict-20*/var2vcf_valid.pl -N {sample} -E -f {params.vaf} > {output}
        """

rule bcf_to_vcf:
    input:
        "{}/vardict/{{sample}}.vcf".format(OUTDIR)
    output:
        "{}/vardict/{{sample}}.vcf.gz".format(OUTDIR)
    params:
        extra=""  # optional parameters for bcftools view (except -o)
    resources:
        time="00:30:00"
    wrapper:
        "v3.1.0/bio/bcftools/view"

rule bcftools_index:
    input:
        "{}/vardict/{{sample}}.vcf.gz".format(OUTDIR)
    output:
        "{}/vardict/{{sample}}.vcf.gz.csi".format(OUTDIR)
    params:
        extra=""  # optional parameters for bcftools index
    resources:
        time="00:30:00"
    wrapper:
        "v3.1.0/bio/bcftools/index"

rule norm_vcf:
    input:
        "{}/vardict/{{sample}}.vcf.gz".format(OUTDIR)
        #index = "{}/vardict/{{sample}}.vcf.gz.csi".format(OUTDIR)
    output:
        "{}/vardict/{{sample}}.norm.vcf.gz".format(OUTDIR)
    log:
        "{}/logs/norm_vcf/{{sample}}.log".format(OUTDIR)
    params:
        extra=''.join(['-f ', config["reference"]['genome']])  # optional parameters for bcftools norm (except -o)
    resources:
        time="00:30:00"
    shell:
        """
        bcftools norm {params.extra} {input} -o {output} &> {log}
        """

rule vcf_to_table:
    input:
        "{}/vardict/{{sample}}.norm.vcf.gz".format(OUTDIR)
    output:
        "{}/vardict/{{sample}}.csv".format(OUTDIR)
    params:
        #wd = config["general"]['work_dir'] + "variantcalling/",
        sd = config["general"]['snakedir'],
        rs = f"scripts/Vcf2Table.R",
    resources:
        time="00:30:00"
    conda:
        "../env/vardict-pipeline.yml",
    shell:
        r"""
        Rscript {params.sd}/{params.rs} {input} {output}
        """
        #Rscript {params.sd}/{params.rs} {params.wd}/{input} {params.wd}/{output}

rule table_to_anno:
    input:
        "{}/vardict/{{sample}}.csv".format(OUTDIR),
    output:
        "{}/table/{{sample}}.csv".format(OUTDIR)
    threads:
        1
    resources:
        time="00:30:00"
    params:
        sd = config["general"]['snakedir'],
        rs = f"scripts/SplitTable.R",
    shell:
        r"""
        Rscript {params.sd}/{params.rs} {input} {output}
        """
# rule table_to_anno:
#     input:
#         "vardict/{{sample}}.csv",
#     output:
#         "table/{{sample}}.csv"
#     threads:
#         1
#     resources:
#         time="00:30:00"
#     params:
#         wd = config["general"]['work_dir'] + "variantcalling/",
#         sd = config["general"]['snakedir'],
#         rs = f"scripts/SplitTable.R",
#     shell:
#         r"""
#         Rscript {params.sd}/{params.rs} {params.wd}/{input} {params.wd}/{output}
#         """

# rule vardict_single_mode:
#     input:
#         reference=config['refgenome'],
#         regions=config["bedfile"],
#         bam=lambda wildcards: input_bam[wildcards.sample],
#     output:
#         vcf="vardict/{sample}.vcf"
#     params:
#         extra="",
#         bed_columns="-c 1 -S 2 -E 3 -g 4",  # Optional, default is -c 1 -S 2 -E 3 -g 4
#         af_th="0.001",  # Optional, default is 0.01
#     threads: 1
#     log:
#         "logs/vardict/vardict_{sample}.log",
#     wrapper:
#         "0.78.0/bio/vardict"

rule vardict:
    input:
        ref=config["reference"]['genome'],
        # you can have a list of samples here
        samples=lambda wildcards: input_bam[wildcards.sample],
        # optional BED file specifying chromosomal regions on which freebayes
        # should run, e.g. all regions that show coverage
        regions=config["reference"]["region_file"],
    output:
        "vardict/{sample}.vcf"
    params:
        extra="-c 1 -S 2 -E 3 -g 4",
        vaf=config["vardict"]["vaf"]
    resources:
        time=get_time_2_1
    conda:
        "/fast/users/altwassr_c/environments/vardict.yaml"
    shell:
        r"""
        mkdir -p vardict
        vardict -k 0 -U -G {input.ref} -f {params.vaf} -N {wildcards.sample} -b {input.samples} {params.extra} {input.regions} | ${{CONDA_PREFIX}}/share/vardict-20*/teststrandbias.R | ${{CONDA_PREFIX}}/share/vardict-20*/var2vcf_valid.pl -N {wildcards.sample} -E -f {params.vaf} > {output}
        """

rule bcf_to_vcf:
    input:
        "vardict/{sample}.vcf"
    output:
        "vardict/{sample}.vcf.gz"
    params:
        extra=""  # optional parameters for bcftools view (except -o)
    resources:
        time="00:30:00"
    wrapper:
        "v1.0.0/bio/bcftools/view"

rule bcftools_index:
    input:
        "vardict/{sample}.vcf.gz"
    output:
        "vardict/{sample}.vcf.gz.csi"
    params:
        extra=""  # optional parameters for bcftools index
    resources:
        time="00:30:00"
    wrapper:
        "v1.0.0/bio/bcftools/index"

rule norm_vcf:
    input:
        vcf = "vardict/{sample}.vcf.gz",
        index = "vardict/{sample}.vcf.gz.csi"
    output:
        "vardict/{sample}.norm.vcf.gz"
    params:
        extra=''.join(['-f ', config["reference"]['genome']])  # optional parameters for bcftools norm (except -o)
    resources:
        time="00:30:00"
    wrapper:
        "v1.0.0/bio/bcftools/norm"


rule vcf_to_table:
    input:
        "vardict/{sample}.norm.vcf.gz"
    output:
        "vardict/{sample}.csv"
    params:
        wd = config["general"]['work_dir'] + "variantcalling/",
        sd = config["general"]['snakedir'],
        rs = f"scripts/Vcf2Table.R",
    resources:
        time="00:30:00"
    conda:
        "../env/vardict-pipeline.yml",
    shell:
        r"""
        Rscript {params.sd}/{params.rs} {params.wd}/{input} {params.wd}/{output}
        """

rule table_to_anno:
    input:
        "vardict/{sample}.csv",
    output:
        "table/{sample}.csv"
    threads:
        1
    resources:
        time="00:30:00"
    params:
        wd = config["general"]['work_dir'] + "variantcalling/",
        sd = config["general"]['snakedir'],
        rs = f"scripts/SplitTable.R",
    shell:
        r"""
        Rscript {params.sd}/{params.rs} {params.wd}/{input} {params.wd}/{output}
        """
